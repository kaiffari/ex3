{"version":3,"sources":["reminders.js","addReminders.js","App.js","reportWebVitals.js","index.js"],"names":["ShowReminders","props","removeReminder","e","preventDefault","window","confirm","axios","delete","target","id","then","response","deleteReminder","console","log","catch","error","message","updateReminder","reminder","reminders","find","r","updatedReminder","important","put","newReminders","map","setReminder","toggleVisible","setState","showAll","state","remindersToShow","this","filter","label","length","onClick","timestamp","toLocaleString","name","React","Component","AddReminders","addReminder","event","findIndex","o","newReminder","time","newTime","toISOString","reminderObject","Math","random","post","data","concat","alert","handleReminderChange","value","handleTimeChange","Date","onSubmit","onChange","type","App","password","bind","get","remainReminders","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c28eb95.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass ShowReminders extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showAll: true\n    }\n};\n\n  removeReminder = (e) => {\n     \n    /* prevent normal submit rendering and get from network */\n    e.preventDefault()\n\n    if (window.confirm('Haluatko todella poistaa?')) {\n        /* delete from database */\n        axios\n        .delete('/api/reminders/' + e.target.id)\n        .then(response => {\n          /* clear also parent state and update rendering after succesful database deletion */\n          this.props.deleteReminder(e.target.id);\n          console.log('deleted: ', e.target.id)\n        })\n        .catch(error => {\n          console.log('delete error: ', error.message)\n        })\n    }\n  }\n\n  updateReminder = (e) => {\n     \n    console.log('toggle importance: ', e.target.id)\n\n    /* prevent normal submit rendering and get from network */\n    e.preventDefault()\n\n    /* toggle */\n    const reminder = this.props.reminders.find(r => r.id === e.target.id)\n    const updatedReminder = { ...reminder, important: !reminder.important }\n    console.log('new: ', updatedReminder)\n    /* write to database */\n    axios\n    .put('/api/reminders/' + e.target.id, updatedReminder)\n    .then(response => {\n      /* set also parent state and update rendering after succesful database deletion */\n      const newReminders = this.props.reminders.map(r => (r.id === e.target.id ? updatedReminder : r))\n      this.props.setReminder(newReminders)\n      console.log('updated: ', e.target.id)\n    })\n    .catch(error => {\n      console.log('update error: ', error.message)\n    })\n  }\n\n  toggleVisible = () => {\n    this.setState({showAll: !this.state.showAll})\n  }\n\n  render () {\n    console.log('render')\n\n    const remindersToShow =\n    this.state.showAll ?\n      this.props.reminders :\n      this.props.reminders.filter(r => r.important === true)\n    const label = this.state.showAll ? 'vain tärkeät' : 'kaikki'\n    \n    if (this.props.reminders.length > 0) {\n    return (\n        <div>  \n          <h2>Muistutukset</h2>\n          <button onClick={this.toggleVisible}>\n            näytä {label}\n          </button>\n          <table><tbody>\n           {remindersToShow.map(\n              reminder =>\n              <tr key={reminder.id}> \n                <td>{reminder.timestamp.toLocaleString()}</td>\n                <td>{reminder.name}</td>\n                <td><button id={reminder.id} onClick={this.removeReminder}>Poista</button></td>\n                <td><button id={reminder.id} onClick={this.updateReminder}>{reminder.important ? 'tärkeä!' : 'vähemmän tärkeä'} (vaihda)</button></td>\n              </tr>\n              )\n            }\n          </tbody></table>\n        </div>\n      )\n    } else {\n      return (<div><h2>Reminders</h2></div>)\n    }\n  }\n}\n\nexport default ShowReminders\n\n/*                <td><button onClick={toggleImportance}>{label}</button></td>*/\n","import React from 'react';\nimport axios from 'axios';\n\nclass AddReminders extends React.Component {\n    constructor(props) {  /* voiko constructorin jättää pois, kokeile */\n      super(props);\n      this.state = {\n        newReminder: '',\n        newTime: new Date()  //.toLocaleString()\n      }\n    }\n\n  addReminder = (event) => {\n  \n    /* prevent normal submit rendering and get from network */\n    event.preventDefault()\n\n    /* prevent duplicates */\n    var pos = this.props.reminders.findIndex(o => o.name === this.state.newReminder)\n    if (pos == -1) {\n\n      /* construct new object */\n      var time  = this.state.newTime.toISOString()\n      const reminderObject = {\n        name: this.state.newReminder,\n        timestamp: time,\n        important: Math.random() > 0.7\n      }\n\n      /* write to database */\n      axios\n        .post('/api/reminders', reminderObject)\n        .then(response => {\n          /* concatenate new list and set to App state */\n          reminderObject.id = response.data /* post returns only new database id */\n          const reminders = this.props.reminders.concat(reminderObject)\n          this.props.setReminder(reminders)\n          /* clear input field */\n          this.setState({newReminder : ''})\n          console.log('post promise fulfilled for: ', reminderObject.name, 'id: ', response.data)\n          //console.log('obj: ', reminderObject)\n      })\n        .catch(error => {\n          console.log(error.message)\n          window.alert('Ei voitu lisätä!')\n        })\n\n    } else {\n      alert('A duplicate reminder exists already!')\n    }\n  }\n\n  handleReminderChange = (event) => {\n    //console.log('new value: ', {newReminder: event.target.value})\n    this.setState({ newReminder: event.target.value })\n  }\n\n  handleTimeChange = (event) => {\n    this.setState({ newTime: event.target.value })\n  }\n  \n  render () {\n\n    return (\n      <div>\n        <form onSubmit={this.addReminder}>\n            <div>\n              Aihe: <input\n                value={this.state.newReminder}\n                onChange={this.handleReminderChange}\n              />\n            </div>\n            <div>\n              Aika: <input\n                value={this.state.newTime}\n                onChange={this.handleTimeChange}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Lisää</button>\n            </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddReminders\n\n/*      date: ,*/\n","import React from 'react';\nimport axios from 'axios';\nimport ShowReminders from './reminders.js';\nimport AddReminders from './addReminders.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      reminders: [],\n      password: ''\n    }\n    this.setReminder = this.setReminder.bind(this);\n    this.deleteReminder = this.deleteReminder.bind(this);\n  }\n\n  componentDidMount() {\n    axios\n      .get('/api/reminders')\n      .then(response => {\n        console.log('get promise fulfilled')\n        console.log('response data: ', response.data)\n        this.setState({ reminders: response.data })\n      })\n  }\n\n  setReminder(reminders) {\n    this.setState(\n      {reminders: reminders}\n    )\n  }\n\n  deleteReminder(id) {\n    console.log('deleteReminder from status...', {id})\n    const remainReminders = this.state.reminders.filter(i => i.id != id)\n    this.setState({reminders: remainReminders})\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Lisää muistutus</h2>\n        <AddReminders\n          reminders={this.state.reminders} \n          setReminder={this.setReminder}/>\n        <ShowReminders\n          reminders={this.state.reminders}\n          deleteReminder={this.deleteReminder}\n          setReminder={this.setReminder}/>\n      </div>\n    \n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}