{"version":3,"sources":["reminders.js","addReminders.js","App.js","reportWebVitals.js","index.js"],"names":["ShowReminders","props","removeReminder","e","window","confirm","axios","delete","target","id","then","response","console","log","deleteReminder","this","reminders","length","map","reminder","timestamp","name","onClick","React","Component","AddReminders","addReminder","event","preventDefault","findIndex","o","state","newReminder","maxid","reminderObject","newTime","concat","setReminder","post","alert","handleReminderChange","setState","value","handleTimeChange","Date","toLocaleString","onSubmit","onChange","type","App","password","bind","get","data","remainReminders","filter","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.59647d9a.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass ShowReminders extends React.Component {\n  constructor(props) {\n    super(props);\n  };\n\n  removeReminder = (e) => {\n    if (window.confirm('Haluatko todella poistaa?')) {\n        axios\n        .delete('/api/reminders/' + e.target.id) /*https://thawing-bayou-48463.herokuapp.com*/\n        .then(\n          (response) => {console.log('deleted: ', e.target.id)})\n\n\n        /* clear parent state and update rendering */\n        this.props.deleteReminder(e.target.id);\n    }\n  }\n\n  render () {\n    console.log('reminders: ', this.props.reminders.length)\n    console.log('render: ', this.props.reminders)\n    if (this.props.reminders.length > 0) {\n    return (\n        <div>  \n          <h2>Reminders</h2>\n          <table><tbody>\n           {this.props.reminders.map(\n              reminder =>\n              <tr key={reminder.id}> \n                <td>{reminder.timestamp}</td>\n                <td>{reminder.name}</td>\n                <td><button id={reminder.id} onClick={this.removeReminder}>Poista</button></td>\n              </tr>\n              )\n            }\n          </tbody></table>\n        </div>\n      )\n    } else {\n      return (<div><h2>Reminders</h2></div>)\n    }\n  }\n}\n\nexport default ShowReminders\n","import React from 'react';\nimport axios from 'axios';\n\nclass AddReminders extends React.Component {\n    constructor(props) {  /* voiko constructorin jättää pois, kokeile */\n      super(props);\n      this.state = {\n        newReminder: '',\n        newTime: new Date().toLocaleString()\n      }\n    }\n\n  addReminder = (event) => {\n  \n    /* prevent normal submit rendering and get from network */\n    event.preventDefault()\n\n    /* prevent duplicates */\n    var pos = this.props.reminders.findIndex(o => o.name === this.state.newReminder)\n    if (pos == -1) {\n\n      /* construct new object */\n      /* HUOM tällä maxid:llä ei ole väliä Heroku käytössä, koska siellä arvotaan uusi id */\n      var maxid = 0\n      this.props.reminders.map(o => {if (o.id > maxid) maxid = o.id})\n      maxid = maxid + 1\n      const reminderObject = {\n        name: this.state.newReminder,\n        timestamp: this.state.newTime,\n        id: maxid\n      }\n    \n      /* concatenate new list and set to App state */\n      const reminders = this.props.reminders.concat(reminderObject)\n      this.props.setReminder(reminders)\n\n      /* write to json file */\n      axios\n        .post('/api/reminders', reminderObject) /* https://thawing-bayou-48463.herokuapp.com */\n        .then(response => {\n          console.log('post promise fulfilled for id: ', maxid)\n        })\n\n        /* clear input field */\n      this.state.newReminder = ''\n\n    } else {\n      alert('A duplicate reminder exists already!')\n    }\n  }\n\n  handleReminderChange = (event) => {\n    this.setState({ newReminder: event.target.value })\n  }\n\n  handleTimeChange = (event) => {\n    this.setState({ newTime: event.target.value })\n  }\n  \n  render () {\n\n    return (\n      <div>\n        <form onSubmit={this.addReminder}>\n            <div>\n              Aihe: <input\n                value={this.state.newReminder}\n                onChange={this.handleReminderChange}\n              />\n            </div>\n            <div>\n              Aika: <input\n                value={this.state.newTime}\n                onChange={this.handleTimeChange}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Lisää</button>\n            </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddReminders\n\n/*      date: ,*/\n","import React from 'react';\nimport axios from 'axios';\nimport ShowReminders from './reminders.js';\nimport AddReminders from './addReminders.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      reminders: [],\n      password: ''\n    }\n    this.setReminder = this.setReminder.bind(this);\n    this.deleteReminder = this.deleteReminder.bind(this);\n  }\n\n  componentDidMount() {\n    axios\n      .get('/api/reminders')      //http://localhost:3001 paikallinen serveri, https://thawing-bayou-48463.herokuapp.com  heroku ilman api tasoa\n      .then(response => {\n        console.log('get promise fulfilled')\n        console.log('response data: ', response.data)\n        this.setState({ reminders: response.data })\n      })\n  }\n\n  setReminder(reminders) {\n    this.setState(\n      {reminders: reminders}\n    )\n  }\n\n  deleteReminder(id) {\n    /*console.log('deleteReminder...', {id})*/\n    const remainReminders = this.state.reminders.filter(i => i.id != id)\n    this.setState({reminders: remainReminders})\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Add Reminder</h2>\n        <AddReminders\n          reminders={this.state.reminders} \n          setReminder={this.setReminder}/>\n        <ShowReminders\n          reminders={this.state.reminders}\n          deleteReminder={this.deleteReminder}/>\n      </div>\n    \n    )\n  }\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}